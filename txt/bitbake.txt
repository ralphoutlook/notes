

Q: basic bitbake tree
A: 
├── bb.mk
├── bb.sh
├── conf
│   └── bblayers.conf
├── macro.mk
├── Makefile
├── meta-first
│   ├── classes
│   │   ├── base.bbclass
│   │   └── base.bbclass.test
│   ├── conf
│   │   ├── bitbake.conf
│   │   └── layer.conf
│   └── recipes-first
│       └── first
│           └── first_0.1.bb
└── rules.mk

------------------------------------------
Q: what is layer?
A: meta-*
------------------------------------------
Q: what is recipe?
A: *.bb
------------------------------------------
Q: How to use *.bbclass
A: 
   # *.bb
     inherit xxx
       -> include xxx.bbclass
     *.bbclass in  meta-*/classes (layers classes)
   # command to fine inherit
     $ find -name *.bb | grep ^inherit
------------------------------------------
Q: online tutorial?
A: https://bitbucket.org/a4z/bitbakeguide/src/master/
------------------------------------------
Q: install bitbake by git fetch? 
A: (version=1.32; git clone -b ${version} https://github.com/openembedded/bitbake.git)
------------------------------------------
# Bake an image (add -k to continue building 
# even errors are found in the tasks execution)

$ bitbake <image>
------------------------------------------
# Execute a particular package's task. Default 
# Tasks names: fetch, unpack, patch, configure, 
# compile, install, package, package_write, and 
# build.

$ bitbake <package> -c <task>	

# Example: To (force) compiling a kernel and 
# then build, type:

$ bitbake linux-imx -f -c compile
$ bitbake linux-imx

------------------------------------------
# Show the package dependency for image.

$ bitbake <image > -g -u depexp

# Example: To show all packages included on fsl-image-gui

$ bitbake fsl-image-gui -g -u depexp

# NOTE: This command will open a UI window, so it must be execute on a console inside the host machine (either virtual or native).

------------------------------------------
# Open a new shell where with neccesary system values already defined for package hob bitbake frontend/GUI.

$ bitbake <package> -c devshell

# List all tasks for package

$ bitbake <package> -c listtasks

# Interactive kernel configuration

$ bitbake virtual/kernel -c menuconfig

# Fetch sources for a particular image

$ bitbake <image> -c fetchall

# Show layers

$ bitbake-layers show-layers	

# Show possible images to bake. Without "*-images-*", it shows ALL recipes

$ bitbake-layers show-recipes "*-image-*"	

# Show image's packages

$ bitbake -g <image> && cat pn-depends.dot | grep -v -e '-native' | grep -v digraph | grep -v -e '-image' | awk '{print $1}' | sort | uniq

# Show package's dependencies

$ bitbake -g <pkg> && cat pn-depends.dot | grep -v -e '-native' | grep -v digraph | grep -v -e '-image' | awk '{print $1}' | sort | uniq

# Print (on console) and store verbose baking

$ bitbake –v <image> 2>&1 | tee image_build.log

# Check if certain package is present on current Yocto Setup

$ bitbake -s | grep <pkg>

# force to do package's task again 

$ bitbake <package> -C <task> 
$ bitbake <package> -c <task>  -f



